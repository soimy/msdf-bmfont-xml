# Multi-stage CI workflow for msdf-bmfont-xml
# Tests across different platforms and Node.js versions with rate limiting protection

name: Node.js CI

on:
  push:
    branches: [ master, major-dependency-updates ]
  pull_request:
    branches: [ master, major-dependency-updates ]
  workflow_dispatch:

env:
  # Global environment variables to reduce rate limiting
  DISABLE_UPDATE_NOTIFIER: true
  NO_UPDATE_NOTIFIER: true
  CI: true

jobs:
  # Stage 1: Quick validation on Linux
  validate:
    name: Quick Validation (Linux)
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.check.outputs.continue }}
    
    strategy:
      matrix:
        node-version: [20.x, 22.x, 24.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i to install dependencies"
          if npm ci --prefer-offline --no-audit --no-fund; then
            echo "Dependencies installed successfully"
            break
          else
            echo "Failed attempt $i, waiting 30 seconds..."
            sleep 30
          fi
        done
    
    - name: Run memory tests
      run: npm run test:memory
    
    - name: Check if should continue
      id: check
      run: echo "continue=true" >> $GITHUB_OUTPUT

  # Stage 2: Windows testing
  test-windows:
    name: Test Windows (Node ${{ matrix.node-version }})
    runs-on: windows-latest
    needs: validate
    if: needs.validate.outputs.should-continue == 'true'
    
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        node-version: [20.x, 22.x, 24.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Random delay to avoid rate limiting
      run: |
        $delay = Get-Random -Minimum 10 -Maximum 40
        Write-Host "Waiting $delay seconds to avoid rate limiting..."
        Start-Sleep -Seconds $delay
      shell: powershell
    
    - name: Install dependencies with retry
      run: |
        for ($i = 1; $i -le 3; $i++) {
          Write-Host "Attempt $i to install dependencies"
          if (npm ci --prefer-offline --no-audit --no-fund) {
            Write-Host "Dependencies installed successfully"
            break
          } else {
            Write-Host "Failed attempt $i, waiting 30 seconds..."
            Start-Sleep -Seconds 30
          }
        }
      shell: powershell
    
    - name: Create test directories
      run: |
        New-Item -ItemType Directory -Force -Path "test/assets/fonts"
        New-Item -ItemType Directory -Force -Path "test/output"
      shell: powershell
    
    - name: Run memory tests
      run: npm run test:memory

  # Stage 3: macOS testing
  test-macos:
    name: Test macOS (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: validate
    if: needs.validate.outputs.should-continue == 'true'
    
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        node-version: [20.x, 22.x, 24.x]
        os: [macos-13, macos-14]  # Intel and Apple Silicon
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Random delay to avoid rate limiting
      run: |
        delay=$((RANDOM % 30 + 15))
        echo "Waiting $delay seconds to avoid rate limiting..."
        sleep $delay
    
    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i to install dependencies"
          if npm ci --prefer-offline --no-audit --no-fund; then
            echo "Dependencies installed successfully"
            break
          else
            echo "Failed attempt $i, waiting 30 seconds..."
            sleep 30
          fi
        done
    
    - name: Create test directories
      run: |
        mkdir -p test/assets/fonts
        mkdir -p test/output
    
    - name: Run memory tests
      run: npm run test:memory

  # Stage 4: Linux ARM64 testing
  test-linux-arm64:
    name: Test Linux ARM64 (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [validate, test-windows]
    if: needs.validate.outputs.should-continue == 'true'
    
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        node-version: [20.x, 22.x, 24.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        architecture: arm64
        cache: 'npm'
    
    - name: Random delay to avoid rate limiting
      run: |
        delay=$((RANDOM % 40 + 20))
        echo "Waiting $delay seconds to avoid rate limiting..."
        sleep $delay
    
    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i to install dependencies"
          if npm ci --prefer-offline --no-audit --no-fund; then
            echo "Dependencies installed successfully"
            break
          else
            echo "Failed attempt $i, waiting 45 seconds..."
            sleep 45
          fi
        done
    
    - name: Create test directories
      run: |
        mkdir -p test/assets/fonts
        mkdir -p test/output
    
    - name: Run memory tests
      run: npm run test:memory

  # Stage 5: Full disk test (only on main Linux to save resources)
  test-disk:
    name: Full Disk Test (Linux x64)
    runs-on: ubuntu-latest
    needs: [validate, test-windows, test-macos]
    if: needs.validate.outputs.should-continue == 'true'
    
    strategy:
      matrix:
        node-version: [22.x]  # Only test on LTS version for disk tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i to install dependencies"
          if npm ci --prefer-offline --no-audit --no-fund; then
            echo "Dependencies installed successfully"
            break
          else
            echo "Failed attempt $i, waiting 30 seconds..."
            sleep 30
          fi
        done
    
    - name: Create test directories
      run: |
        mkdir -p test/assets/fonts
        mkdir -p test/output
    
    - name: Run full test suite
      run: npm test
